apiVersion: tekton.dev/v1alpha1
kind: StepAction
metadata:
  name: operator-sdk-run-bundle
spec:
  image: registry.redhat.io/openshift4/ose-cli:latest
  params:
    - name: SNAPSHOT
      description: Expected output of the application endpoint
    - name: chaostest
      description: Namespace to deploy app to for testing
    - name: ocmSecretRef
      description: Name of a secret containing OCM credentials.
    - name: credentials
      description: A volume to which the remote cluster credentials will be written.
  results:
    - name: APP_URL
      description: APP URL
    - name: test_name
      description: Test name
    - name: reg_var
      description: Regression variable             
    - name: chaos_test_namespace
      description: Chaos test namespace                    
  env:
    - name: KUBECONFIG
      value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
    - name: CHAOS_TEST
      value: $(params.chaostest)                
    - name: SNAPSHOT
      value: $(params.SNAPSHOT)
    - name: CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: $(params.ocmSecretRef)
          key: client_id
    - name: CLIENT_SEC
      valueFrom:
        secretKeyRef:
          name: $(params.ocmSecretRef)
          key: client_secret                                  
  volumeMounts:
    - name: "$(params.credentials)"
      mountPath: /credentials
  script: |
    #!/usr/bin/env bash
    echo $KUBECONFIG
    ls -l /credentials 
    cat $KUBECONFIG
    echo $SNAPSHOT
    echo $CLIENT_ID
    echo $CLIENT_SEC
    oc whoami 
    dnf -y install jq git

    oc new-project ${CHAOS_TEST}
    oc project ${CHAOS_TEST}
    # Get the route for the application endpoint
    COMPONENT_NAME=$(echo -n ${SNAPSHOT} | jq -r .components[0].name)
    # The --insecure-skip-tls-verify option is added for local testing
    # when the clusters only have self-signed certificates.
    # This option should not be used in production.

    TARGET_COMPONENT_NAME="/tmp/rh-trex"
    REPO_URL=$(echo $SNAPSHOT | jq -r '.components[] | .source.git.url')
    REPO_COMMIT=$(echo $SNAPSHOT | jq -r '.components[] | .source.git.revision')
    REPO_IMG=$(echo $SNAPSHOT | jq -r '.components[] | .containerImage')
    git clone $REPO_URL $TARGET_COMPONENT_NAME
    cd $TARGET_COMPONENT_NAME
    git checkout $REPO_COMMIT
    rev=$(echo ${REPO_IMG#*/})
    image_reg=$(echo ${REPO_IMG%%/*})
    image_tag=$(echo ${rev#*:})
    image_rep=$(echo ${rev%:*})
    mkdir -p /tmp/templates/
    for i in $(ls templates/*yml); do j=${i#*/}; outf=${j%.*};oc process --filename="$i" --local="true" --ignore-unknown-parameters="true" --param="ENVIRONMENT"=development --param="GLOG_V"=10  --param="DATABASE_HOST"=trex-db.$(oc project --short) --param="DATABASE_NAME"=rhtrex  --param="DATABASE_PASSWORD"=foobar-bizz-buzz  --param="DATABASE_PORT"=5432 --param="DATABASE_USER"=trex  --param="DATABASE_SSLMODE"=disable --param="ENABLE_SENTRY"=false --param="SENTRY_KEY"=TODO --param="JWKS_URL"=https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/certs  --param="OCM_SERVICE_CLIENT_ID"=${CLIENT_ID} --param="OCM_SERVICE_CLIENT_SECRET"=${CLIENT_SEC}  --param="OCM_BASE_URL"=https://api.integration.openshift.com --param="IMAGE_REGISTRY="$image_reg --param="IMAGE_REPOSITORY="$image_rep --param="IMAGE_TAG="$image_tag  > /tmp/templates/${outf}.json; done
    oc apply  -f /tmp/templates/db-template.json
    sleep 60
    oc apply  -f /tmp/templates/secrets-template.json
    oc apply   -f /tmp/templates/service-template.json
    sleep 60
    oc expose service trex
    oc patch route trex -p '{"spec":{"tls":{"termination":"passthrough"}}}'
    oc get  all
    oc get  events
    oc describe  pod -l app=trex
    oc logs  -l app=trex
    ROUTE_NAME=$(oc get  routes trex -o name --insecure-skip-tls-verify)
    test_namespace=$(oc  project -q)
    #HOST="trex.${test_namespace}.svc.cluster.local:8000"
    #HOST="$(oc get service trex -o jsonpath='{.spec.clusterIP}'):8000"
    HOST=$(oc get "${ROUTE_NAME}" -o jsonpath={.spec.host}  --insecure-skip-tls-verify)
    echo "Found target host ${HOST} for app ${APPLICATION_NAME}"
    
    # Check the application endpoint
    curl -k https://${HOST}
    ENDPOINT_OUTPUT=$(curl -k https://${HOST})
    echo -e "The endpoint outputs the following:\n ${ENDPOINT_OUTPUT}"
    echo -e "Snapshot output:\n ${SNAPSHOT}"
    echo ${HOST} > /tekton/home/endpoint_url            
    echo -n ${HOST} | tee $(results.APP_URL.path)
    echo '$(params.SNAPSHOT)'|jq -r .components[].name |  tr -d '\n\t' | tee $(results.test_name.path)
    echo -n 'iteration_duration' | tee $(results.reg_var.path)
    echo -n "${CHAOS_TEST}" | tee $(results.chaos_test_namespace.path)