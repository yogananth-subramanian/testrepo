---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: deploy-operator
spec:
  description: |
    An integration test which provisions an ephemeral Hypershift cluster and deploys an Operator
    bundle from a Konflux snapshot.
  params:
    - description: Snapshot of the application
      name: SNAPSHOT
      default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
      type: string
    - description: Namespace where the the Operator bundle will be deployed.
      name: NAMESPACE
      default: default
      type: string
    - name: chaostest
      default: application-outages
      type: string
  tasks:
    - name: parse-metadata
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/konflux-ci/integration-examples
          - name: revision
            value: main
          - name: pathInRepo
            value: tasks/test_metadata.yaml
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
    - name: provision-eaas-space
      runAfter:
        - parse-metadata
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/konflux-ci/build-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: task/eaas-provision-space/0.1/eaas-provision-space.yaml
      params:
        - name: ownerName
          value: $(context.pipelineRun.name)
        - name: ownerUid
          value: $(context.pipelineRun.uid)
    - name: provision-cluster
      runAfter:
        - provision-eaas-space
      taskSpec:
        results:
          - name: clusterName
            value: "$(steps.create-cluster.results.clusterName)"
        steps:
          - name: get-supported-versions
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-supported-ephemeral-cluster-versions/0.1/eaas-get-supported-ephemeral-cluster-versions.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.provision-eaas-space.results.secretRef)
          - name: pick-version
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-latest-openshift-version-by-prefix/0.1/eaas-get-latest-openshift-version-by-prefix.yaml
            params:
              - name: prefix
                value: "$(steps.get-supported-versions.results.versions[0])."
          - name: create-cluster
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-create-ephemeral-cluster-hypershift-aws/0.1/eaas-create-ephemeral-cluster-hypershift-aws.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.provision-eaas-space.results.secretRef)
              - name: version
                value: "$(steps.pick-version.results.version)"
              - name: instanceType	
                value: m5.large                 
    - name: extract-kubeconfig
      runAfter:
        - provision-cluster
      params:
        - name: bundleImage
          value: "$(tasks.parse-metadata.results.component-container-image)"
        - name: namespace
          value: "$(params.NAMESPACE)"
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: chaostest
          value: application-outages       
      taskSpec:
        params:
          - name: bundleImage
            type: string
          - name: namespace
            type: string
          - name: SNAPSHOT
            description: Expected output of the application endpoint                
        volumes:
          - name: credentials
            emptyDir: {}
        steps:
          - name: get-kubeconfig
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.provision-eaas-space.results.secretRef)
              - name: clusterName
                value: "$(tasks.provision-cluster.results.clusterName)"
              - name: credentials
                value: credentials
          - name: operator-sdk-run-bundle
            image: registry.redhat.io/openshift4/ose-cli:latest
            env:
              - name: KUBECONFIG
                value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
              - name: SNAPSHOT
                value: $(params.SNAPSHOT)
              - name: CLIENT_ID
                valueFrom:
                  secretKeyRef:
                    name: ocm
                    key: client_id
              - name: CLIENT_SEC
                valueFrom:
                  secretKeyRef:
                    name: ocm
                    key: client_secret                                  
            volumeMounts:
              - name: credentials
                mountPath: /credentials
            script: |
              #!/usr/bin/env bash
              echo $KUBECONFIG
              ls -l /credentials 
              cat $KUBECONFIG
              echo $SNAPSHOT
              echo $CLIENT_ID
              echo $CLIENT_SEC
              oc whoami 
              dnf -y install jq git

              # Get the route for the application endpoint
              COMPONENT_NAME=$(echo -n ${SNAPSHOT} | jq -r .components[0].name)
              # The --insecure-skip-tls-verify option is added for local testing
              # when the clusters only have self-signed certificates.
              # This option should not be used in production.

              TARGET_COMPONENT_NAME="/tmp/rh-trex"
              REPO_URL=$(echo $SNAPSHOT | jq -r '.components[] | .source.git.url')
              REPO_COMMIT=$(echo $SNAPSHOT | jq -r '.components[] | .source.git.revision')
              REPO_IMG=$(echo $SNAPSHOT | jq -r '.components[] | .containerImage')
              git clone $REPO_URL $TARGET_COMPONENT_NAME
              cd $TARGET_COMPONENT_NAME
              git checkout $REPO_COMMIT
              rev=$(echo ${REPO_IMG#*/})
              image_reg=$(echo ${REPO_IMG%%/*})
              image_tag=$(echo ${rev#*:})
              image_rep=$(echo ${rev%:*})
              mkdir -p /tmp/templates/
              for i in $(ls templates/*yml); do j=${i#*/}; outf=${j%.*};oc process --filename="$i" --local="true" --ignore-unknown-parameters="true" --param="ENVIRONMENT"=development --param="GLOG_V"=10  --param="DATABASE_HOST"=trex-db.$(oc project --short) --param="DATABASE_NAME"=rhtrex  --param="DATABASE_PASSWORD"=foobar-bizz-buzz  --param="DATABASE_PORT"=5432 --param="DATABASE_USER"=trex  --param="DATABASE_SSLMODE"=disable --param="ENABLE_SENTRY"=false --param="SENTRY_KEY"=TODO --param="JWKS_URL"=https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/certs  --param="OCM_SERVICE_CLIENT_ID"=${CLIENT_ID} --param="OCM_SERVICE_CLIENT_SECRET"=${CLIENT_SEC}  --param="OCM_BASE_URL"=https://api.integration.openshift.com --param="IMAGE_REGISTRY="$image_reg --param="IMAGE_REPOSITORY="$image_rep --param="IMAGE_TAG="$image_tag  > /tmp/templates/${outf}.json; done
              oc apply  -f /tmp/templates/db-template.json
              sleep 120
              oc apply  -f /tmp/templates/secrets-template.json
              oc apply  -f /tmp/templates/service-template.json
              sleep 180
              #oc expose service trex
              oc get  all
              oc get  events
              oc describe pod -l app=trex
              oc logs -l app=trex
              #ROUTE_NAME=$(oc get  routes trex -o name --insecure-skip-tls-verify)
              test_namespace=$(oc  project -q)
              #HOST="trex.${test_namespace}.svc.cluster.local:8000"
              HOST="$(oc get service trex -o jsonpath='{.spec.clusterIP}'):8000"
              #HOST=$(oc get "${ROUTE_NAME}" -o jsonpath={.spec.host}  --insecure-skip-tls-verify)
              echo "Found target host ${HOST} for app ${APPLICATION_NAME}"
              
              # Check the application endpoint
              curl -k https://${HOST}
              ENDPOINT_OUTPUT=$(curl -k https://${HOST})
              echo -e "The endpoint outputs the following:\n ${ENDPOINT_OUTPUT}"
              echo -e "Snapshot output:\n ${SNAPSHOT}"
              echo ${HOST} > /tekton/home/endpoint_url            
              echo -n ${HOST} | tee $(results.APP_URL.path)
              if [ -z $(params.HR_TEST_NAME) ]
              then
                echo '$(params.SNAPSHOT)'|jq -r .components[].name |  tr -d '\n\t' | tee $(results.test_name.path)
              else
                echo -n  '$(params.HR_TEST_NAME)' | tee $(results.test_name.path)
              fi            
              
              if [ -z $(params.HR_REG_VAR) ]
              then
                echo -n 'iteration_duration' | tee $(results.reg_var.path)
              else
                echo -n '$(params.HR_REG_VAR)' | tee $(results.reg_var.path)
              fi   

